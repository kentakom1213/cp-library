use cp_library_rs::segmented_sieve::segmented_sieve;

#[test]
fn test_small() {
    assert_eq!(segmented_sieve(0, 0), vec![]);
    assert_eq!(segmented_sieve(0, 1), vec![]);
    assert_eq!(segmented_sieve(0, 2), vec![]);
    assert_eq!(segmented_sieve(0, 3), vec![2]);
    assert_eq!(segmented_sieve(0, 4), vec![2, 3]);
    assert_eq!(segmented_sieve(5, 6), vec![5]);
    assert_eq!(segmented_sieve(7, 7), vec![]);
    assert_eq!(segmented_sieve(7, 8), vec![7]);
}

#[test]
fn test_medium() {
    assert_eq!(
        segmented_sieve(100_000_000, 100_001_000),
        vec![
            100000007, 100000037, 100000039, 100000049, 100000073, 100000081, 100000123, 100000127,
            100000193, 100000213, 100000217, 100000223, 100000231, 100000237, 100000259, 100000267,
            100000279, 100000357, 100000379, 100000393, 100000399, 100000421, 100000429, 100000463,
            100000469, 100000471, 100000493, 100000541, 100000543, 100000561, 100000567, 100000577,
            100000609, 100000627, 100000643, 100000651, 100000661, 100000669, 100000673, 100000687,
            100000717, 100000721, 100000793, 100000799, 100000801, 100000837, 100000841, 100000853,
            100000891, 100000921, 100000937, 100000939, 100000963, 100000969
        ]
    );

    assert_eq!(
        segmented_sieve(200_000_000, 200_001_000),
        vec![
            200000033, 200000039, 200000051, 200000069, 200000081, 200000083, 200000089, 200000093,
            200000107, 200000117, 200000123, 200000131, 200000161, 200000183, 200000201, 200000209,
            200000221, 200000237, 200000239, 200000243, 200000299, 200000321, 200000329, 200000347,
            200000377, 200000399, 200000417, 200000431, 200000447, 200000453, 200000477, 200000483,
            200000491, 200000513, 200000527, 200000531, 200000543, 200000551, 200000579, 200000677,
            200000719, 200000729, 200000777, 200000797, 200000803, 200000819, 200000831, 200000833,
            200000863, 200000881, 200000891, 200000917, 200000929, 200000987, 200000989
        ]
    );

    assert_eq!(
        segmented_sieve(300_000_000, 300_001_000),
        vec![
            300000007, 300000031, 300000047, 300000089, 300000119, 300000137, 300000149, 300000167,
            300000251, 300000277, 300000317, 300000319, 300000353, 300000383, 300000397, 300000413,
            300000419, 300000451, 300000461, 300000497, 300000517, 300000521, 300000529, 300000539,
            300000541, 300000553, 300000559, 300000587, 300000619, 300000629, 300000641, 300000653,
            300000667, 300000689, 300000691, 300000739, 300000791, 300000793, 300000817, 300000839,
            300000851, 300000881, 300000889, 300000893, 300000901, 300000913, 300000917, 300000947,
            300000959, 300000991, 300000997
        ]
    );

    assert_eq!(
        segmented_sieve(400_000_000, 400_001_000),
        vec![
            400000009, 400000043, 400000049, 400000067, 400000079, 400000091, 400000109, 400000151,
            400000171, 400000189, 400000193, 400000261, 400000283, 400000301, 400000309, 400000333,
            400000357, 400000373, 400000411, 400000457, 400000477, 400000499, 400000511, 400000543,
            400000553, 400000583, 400000619, 400000631, 400000639, 400000649, 400000651, 400000669,
            400000709, 400000753, 400000759, 400000789, 400000829, 400000841, 400000873, 400000877,
            400000883, 400000907, 400000927, 400000933, 400000949
        ]
    );
}

#[test]
fn test_big() {
    assert_eq!(
        segmented_sieve(1000_000_000_000, 1000_000_001_000),
        vec![
            1000000000039,
            1000000000061,
            1000000000063,
            1000000000091,
            1000000000121,
            1000000000163,
            1000000000169,
            1000000000177,
            1000000000189,
            1000000000193,
            1000000000211,
            1000000000271,
            1000000000303,
            1000000000331,
            1000000000333,
            1000000000339,
            1000000000459,
            1000000000471,
            1000000000537,
            1000000000543,
            1000000000547,
            1000000000561,
            1000000000609,
            1000000000661,
            1000000000669,
            1000000000721,
            1000000000751,
            1000000000787,
            1000000000789,
            1000000000799,
            1000000000841,
            1000000000903,
            1000000000921,
            1000000000931,
            1000000000933,
            1000000000949,
            1000000000997
        ]
    );

    assert_eq!(
        segmented_sieve(2000_000_000_000, 2000_000_001_000),
        vec![
            2000000000003,
            2000000000123,
            2000000000137,
            2000000000153,
            2000000000179,
            2000000000197,
            2000000000203,
            2000000000231,
            2000000000237,
            2000000000267,
            2000000000303,
            2000000000381,
            2000000000419,
            2000000000443,
            2000000000447,
            2000000000473,
            2000000000477,
            2000000000483,
            2000000000489,
            2000000000491,
            2000000000527,
            2000000000573,
            2000000000611,
            2000000000617,
            2000000000623,
            2000000000629,
            2000000000633,
            2000000000681,
            2000000000683,
            2000000000707,
            2000000000729,
            2000000000737,
            2000000000759,
            2000000000777,
            2000000000783,
            2000000000809,
            2000000000927,
            2000000000981,
            2000000000983
        ]
    );

    assert_eq!(
        segmented_sieve(3000_000_000_000, 3000_000_001_000),
        vec![
            3000000000013,
            3000000000121,
            3000000000157,
            3000000000167,
            3000000000187,
            3000000000353,
            3000000000373,
            3000000000377,
            3000000000409,
            3000000000419,
            3000000000457,
            3000000000499,
            3000000000509,
            3000000000541,
            3000000000617,
            3000000000631,
            3000000000649,
            3000000000689,
            3000000000713,
            3000000000721,
            3000000000761,
            3000000000769,
            3000000000793,
            3000000000799,
            3000000000821,
            3000000000847,
            3000000000857,
            3000000000859,
            3000000000941
        ]
    );

    assert_eq!(
        segmented_sieve(4000_000_000_000, 4000_000_001_000),
        vec![
            4000000000039,
            4000000000043,
            4000000000069,
            4000000000187,
            4000000000193,
            4000000000331,
            4000000000361,
            4000000000397,
            4000000000433,
            4000000000517,
            4000000000531,
            4000000000547,
            4000000000603,
            4000000000613,
            4000000000681,
            4000000000687,
            4000000000693,
            4000000000813,
            4000000000817,
            4000000000861,
            4000000000897,
            4000000000901,
            4000000000907,
            4000000000949,
            4000000000967,
            4000000000981
        ]
    );
}
